// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TUM.SimpleLinkChecker.Data;

#nullable disable

namespace TUM.SimpleLinkChecker.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240530213012_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.Scrape", b =>
                {
                    b.Property<Guid>("ScrapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ScrapeId");

                    b.ToTable("Scrapes");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.Snapshot", b =>
                {
                    b.Property<Guid>("SnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AnalyzeBecauseReference")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AnalyzeBecauseUrl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("C_Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("C_Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("C_Typo3PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentExceptionMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentExceptionType")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ContentScraped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ScrapeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SnapshotId");

                    b.HasIndex("ScrapeId");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.WebRef", b =>
                {
                    b.Property<Guid>("WebRefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LinkMalformed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkText")
                        .HasColumnType("TEXT");

                    b.Property<string>("RawLink")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("XPath")
                        .HasColumnType("TEXT");

                    b.HasKey("WebRefId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("WebRefs");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.Snapshot", b =>
                {
                    b.HasOne("TUM.SimpleLinkChecker.Data.Scrape", "Scrape")
                        .WithMany("Snapshots")
                        .HasForeignKey("ScrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scrape");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.WebRef", b =>
                {
                    b.HasOne("TUM.SimpleLinkChecker.Data.Snapshot", "Source")
                        .WithMany("OutgoingLinks")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TUM.SimpleLinkChecker.Data.Snapshot", "Target")
                        .WithMany("IncomingLinks")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.Scrape", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("TUM.SimpleLinkChecker.Data.Snapshot", b =>
                {
                    b.Navigation("IncomingLinks");

                    b.Navigation("OutgoingLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
